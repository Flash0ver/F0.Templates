using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Testing;
#if (MSTest)
using Microsoft.VisualStudio.TestTools.UnitTesting;
#elif (NUnit)
using NUnit.Framework;
#else
using Xunit;
#endif
using VerifyCS = Roslyn.Generator.UnitTests.Verifiers.CSharpSourceGeneratorVerifier<Roslyn.Generator.HelloWorldGenerator>;

namespace Roslyn.Generator.UnitTests
{
#if (MSTest)
	[TestClass]
#elif (NUnit)
	[TestFixture]
#endif
	public class HelloWorldGeneratorUnitTests
	{
		private const string Attribute = @"// <auto-generated/>
#nullable enable

namespace Roslyn.Generated
{
	[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false)]
	internal sealed class HelloWorldAttribute : global::System.Attribute
	{
	}
}
";

#if (MSTest)
		[TestMethod]
#elif (NUnit)
		[Test]
#else
		[Fact]
#endif
		public async Task Generator_NoCandidates_AddAttributeUnconditionally()
		{
			string code = @"
using System;
using Roslyn.Generated;

namespace Tests
{
	internal static partial class Greeter
	{
		[Placeholder]
		public static partial string {|#0:GetHelloWorld|}();
	}

	[AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
	internal sealed class PlaceholderAttribute : Attribute
	{
	}
}
";

			DiagnosticResult diagnostic = VerifyCS.Diagnostic("CS8795", DiagnosticSeverity.Error)
				.WithLocation(0)
				.WithArguments("Tests.Greeter.GetHelloWorld()");

			await VerifyCS.VerifyGeneratorAsync(code, diagnostic, ("HelloWorldAttribute.g.cs", Attribute));
		}

#if (MSTest)
		[TestMethod]
#elif (NUnit)
		[Test]
#else
		[Fact]
#endif
		public async Task Generator_WithCandidates_AddPartialMethods()
		{
			string code = @"
using System;
using Roslyn.Generated;

namespace @Tests
{
	internal static partial class @Greeter
	{
		[@HelloWorldAttribute]
		public static partial string @GetHelloWorld();
	}

	internal static partial class Greeter
	{
		[HelloWorld]
		public static partial string GetAdditionalHelloWorld();
	}

	internal static partial class AdditionalGreeter
	{
		[Obsolete]
		[HelloWorldAttribute()]
		public static partial string GetHelloWorld();

		[Obsolete, Roslyn.Generated.HelloWorld()]
		public static partial string GetAdditionalHelloWorld();

		[Roslyn.Generated.HelloWorldAttribute(), Obsolete]
		public static partial string Get();

		[global::Roslyn.Generated.HelloWorldAttribute()]
		[Obsolete]
		public static partial string HelloWorld();
	}
}
";

			string generated = @"// <auto-generated/>
#nullable enable

namespace Tests
{
	partial class Greeter
	{
		public static partial string GetHelloWorld() => ""Hello, World!"";
		public static partial string GetAdditionalHelloWorld() => ""Hello, World!"";
	}
}
";

			string additionalGenerated = @"// <auto-generated/>
#nullable enable

namespace Tests
{
	partial class AdditionalGreeter
	{
		public static partial string GetHelloWorld() => ""Hello, World!"";
		public static partial string GetAdditionalHelloWorld() => ""Hello, World!"";
		public static partial string Get() => ""Hello, World!"";
		public static partial string HelloWorld() => ""Hello, World!"";
	}
}
";

			await VerifyCS.VerifyGeneratorAsync(code, ("HelloWorldAttribute.g.cs", Attribute), ("Greeter.HelloWorld.g.cs", generated), ("AdditionalGreeter.HelloWorld.g.cs", additionalGenerated));
		}
#if (!Roslyn3_8)

#if (MSTest)
		[TestMethod]
#elif (NUnit)
		[Test]
#else
		[Fact]
#endif
		public async Task Generator_WithCandidatesAlias_AddPartialMethod()
		{
			string code = @"
using System;
using Greet = Roslyn.Generated.HelloWorldAttribute;

namespace Tests
{
	internal static partial class Greeter
	{
		[Greet]
		public static partial string GetAliasHelloWorld();

		[HelloWorld]
		public static partial string {|#0:GetDifferentHelloWorld|}();
	}

	[AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
	internal sealed class HelloWorldAttribute : Attribute
	{
	}
}
";

			string generated = @"// <auto-generated/>
#nullable enable

namespace Tests
{
	partial class Greeter
	{
		public static partial string GetAliasHelloWorld() => ""Hello, World!"";
	}
}
";

			DiagnosticResult diagnostic = VerifyCS.Diagnostic("CS8795", DiagnosticSeverity.Error)
				.WithLocation(0)
				.WithArguments("Tests.Greeter.GetDifferentHelloWorld()");

			await VerifyCS.VerifyGeneratorAsync(code, diagnostic, ("HelloWorldAttribute.g.cs", Attribute), ("Greeter.HelloWorld.g.cs", generated));
		}
#endif
	}
}
