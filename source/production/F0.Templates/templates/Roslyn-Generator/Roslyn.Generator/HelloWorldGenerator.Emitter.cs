using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Globalization;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Roslyn.Generator
{
	internal partial class HelloWorldGenerator
	{
		private const string HelloWorldAttribute = @"// <auto-generated/>
#nullable enable

namespace Roslyn.Generated
{
	[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false)]
	internal sealed class HelloWorldAttribute : global::System.Attribute
	{
	}
}
";

		private static IEnumerable<(string typeName, string source)> GenerateSourceCode(IReadOnlyList<MethodDeclarationSyntax> candidateMethods, Compilation compilation, CancellationToken cancellationToken)
		{
			StringBuilder builder = new();
			using StringWriter writer = new(builder, CultureInfo.InvariantCulture);
			using IndentedTextWriter source = new(writer, "\t");

			foreach (IGrouping<TypeDeclarationSyntax, MethodDeclarationSyntax> candidateMethod in GroupByContainingType(candidateMethods))
			{
				SemanticModel semanticModel = compilation.GetSemanticModel(candidateMethod.Key.SyntaxTree);

				INamedTypeSymbol? typeSymbol = semanticModel.GetDeclaredSymbol(candidateMethod.Key, cancellationToken);

				if (typeSymbol is null)
				{
					continue;
				}

				source.WriteLine("// <auto-generated/>");
				source.WriteLine("#nullable enable");
				source.WriteLine();

				if (!typeSymbol.ContainingNamespace.IsGlobalNamespace)
				{
					source.WriteLine($"namespace {typeSymbol.ContainingNamespace}");
					source.WriteLine("{");
					source.Indent++;
				}

				source.WriteLine($"partial {candidateMethod.Key.Keyword} {candidateMethod.Key.Identifier.ValueText}");
				source.WriteLine("{");
				source.Indent++;

#if (Roslyn3_8)
				bool hasGenerated = false;
#endif
				foreach (MethodDeclarationSyntax methodDeclaration in candidateMethod)
				{
#if (Roslyn3_8)
					if (!DoesReturnString(methodDeclaration, semanticModel, cancellationToken)
						|| !HasHelloWorldAttribute(methodDeclaration))
					{
						continue;
					}

#endif
					source.WriteLine($@"{methodDeclaration.Modifiers} string {methodDeclaration.Identifier.ValueText}() => ""Hello, World!"";");
#if (Roslyn3_8)
					hasGenerated = true;
#endif
				}

				source.Indent--;
				source.WriteLine("}");

				if (!typeSymbol.ContainingNamespace.IsGlobalNamespace)
				{
					source.Indent--;
					source.WriteLine("}");
				}

				Debug.Assert(source.Indent == 0);

#if (Roslyn3_8)
				if (hasGenerated)
				{
					yield return (candidateMethod.Key.Identifier.ValueText, writer.ToString());
				}

#else
				yield return (candidateMethod.Key.Identifier.ValueText, writer.ToString());
#endif
				_ = builder.Clear();
			}
		}

		private static IEnumerable<IGrouping<TypeDeclarationSyntax, MethodDeclarationSyntax>> GroupByContainingType(IReadOnlyList<MethodDeclarationSyntax> methods)
		{
			return methods.GroupBy(static method => (method.Parent as TypeDeclarationSyntax)!, TypeIdentifierEqualityComparer.Instance)
				.Where(static grouping => grouping.Key is not null);
		}
	}
}
